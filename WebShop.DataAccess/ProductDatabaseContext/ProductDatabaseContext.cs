using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;
using WebShop.Commons.Extensions;
using WebShop.DataAccess.ProductDatabaseContext.Entities;

using System.Linq;
using System.Runtime.Serialization;
using System.Threading.Tasks;

namespace WebShop.DataAccess.ProductDatabaseContext
{
    public class ProductDatabaseContext : DbContext
    {
        public ProductDatabaseContext(DbContextOptions<ProductDatabaseContext> options) : base(options)
        {

        }



        public DbSet<User> Users { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<Product> Product { get; set; }
        public DbSet<ProductOrder> ProductOrder { get; set; }
        public DbSet<News> News { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            #region AutoGenerated Ids

            modelBuilder
                .Entity<News>()
                .Property(p => p.NewsId)
                .ValueGeneratedOnAdd();

            modelBuilder
                .Entity<User>()
                .Property(p => p.UserId)
                .ValueGeneratedOnAdd();

            modelBuilder
                .Entity<Order>()
                .Property(p => p.OrderId)
                .ValueGeneratedOnAdd();

            modelBuilder
                .Entity<Product>()
                .Property(p => p.ProductId)
                .ValueGeneratedOnAdd();

            modelBuilder
                .Entity<ProductOrder>()
                .Property(p => p.ProductOrderId)
                .ValueGeneratedOnAdd();

            #endregion

            #region Setup Ignore Attributes

            modelBuilder.Entity<ProductOrder>().Ignore(x => x.TotalPrice).Ignore(x => x.Quantity);

            #endregion

            #region Setup Primary Keys

            modelBuilder.Entity<Order>().HasKey(ug => ug.OrderId);
            modelBuilder.Entity<User>().HasKey(u => u.UserId);
            modelBuilder.Entity<Product>().HasKey(ug => ug.ProductId);
            modelBuilder.Entity<ProductOrder>().HasKey(u => u.ProductOrderId);
            modelBuilder.Entity<ProductOrderProduct>().HasKey(u => new { u.ProductOrderId, u.ProductId });

            #endregion

            #region Setup Foreign Keys

            modelBuilder.Entity<User>().HasMany<Order>().WithOne(x => x.User).HasPrincipalKey(ug => ug.UserId).HasForeignKey(u => u.OrderId).OnDelete(DeleteBehavior.NoAction);

            modelBuilder.Entity<Order>().HasOne<User>().WithMany(x => x.Orders).HasPrincipalKey(ug => ug.UserId).HasForeignKey(u => u.OrderId).OnDelete(DeleteBehavior.NoAction);


            modelBuilder.Entity<Order>().HasMany<ProductOrder>().WithOne(x => x.Order).HasPrincipalKey(ug => ug.OrderId).HasForeignKey(u => u.ProductOrderId).OnDelete(DeleteBehavior.NoAction);

            modelBuilder.Entity<ProductOrder>().HasOne<Order>().WithMany(x => x.ProductOrders).HasPrincipalKey(ug => ug.OrderId).HasForeignKey(u => u.ProductOrderId).OnDelete(DeleteBehavior.NoAction);

            modelBuilder.Entity<Product>()
                .HasMany<ProductOrderProduct>()
                .WithOne(x => x.Product).HasPrincipalKey(x => x.ProductId).OnDelete(DeleteBehavior.Cascade)
                .HasForeignKey(x => x.ProductId);

            modelBuilder.Entity<ProductOrder>()
                .HasMany<ProductOrderProduct>()
                .WithOne(x => x.ProductOrder).HasPrincipalKey(x => x.ProductOrderId).OnDelete(DeleteBehavior.Cascade)
                .HasForeignKey(x => x.ProductOrderId);


            modelBuilder.Entity<ProductOrderProduct>()
                .HasOne<ProductOrder>()
                .WithMany(x => x.ProductsInOrder).HasPrincipalKey(x => x.ProductOrderId).OnDelete(DeleteBehavior.Cascade).HasForeignKey(x => x.ProductOrderId);

            modelBuilder.Entity<ProductOrderProduct>()
                .HasOne<Product>()
                .WithMany(x => x.ProductOrders).HasPrincipalKey(x => x.ProductId).OnDelete(DeleteBehavior.Cascade).HasForeignKey(x => x.ProductId);

            #endregion

        }
    }
}
