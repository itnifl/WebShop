// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebShop.DataAccess.ProductDatabaseContext;

namespace WebShop.DataAccess.Migrations
{
    [DbContext(typeof(WebShop.DataAccess.ProductDatabaseContext.ProductDatabaseContext))]
    [Migration("20210127222854_DBInit")]
    partial class DBInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.ProductOrder", b =>
                {
                    b.Property<Guid>("ProductOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductOrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.ProductOrderProduct", b =>
                {
                    b.Property<Guid>("ProductOrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProductOrderId1")
                        .HasColumnType("char(36)");

                    b.HasKey("ProductOrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("ProductOrderId1");

                    b.ToTable("ProductOrderProduct");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessRole")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.Order", b =>
                {
                    b.HasOne("WebShop.DataAccess.ProductDatabaseContext.Entities.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebShop.DataAccess.ProductDatabaseContext.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.ProductOrder", b =>
                {
                    b.HasOne("WebShop.DataAccess.ProductDatabaseContext.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("WebShop.DataAccess.ProductDatabaseContext.Entities.Order", null)
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.ProductOrderProduct", b =>
                {
                    b.HasOne("WebShop.DataAccess.ProductDatabaseContext.Entities.Product", null)
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.DataAccess.ProductDatabaseContext.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId1");

                    b.HasOne("WebShop.DataAccess.ProductDatabaseContext.Entities.ProductOrder", null)
                        .WithMany("ProductsInOrder")
                        .HasForeignKey("ProductOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebShop.DataAccess.ProductDatabaseContext.Entities.ProductOrder", "ProductOrder")
                        .WithMany()
                        .HasForeignKey("ProductOrderId1");

                    b.Navigation("Product");

                    b.Navigation("ProductOrder");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.ProductOrder", b =>
                {
                    b.Navigation("ProductsInOrder");
                });

            modelBuilder.Entity("WebShop.DataAccess.ProductDatabaseContext.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
